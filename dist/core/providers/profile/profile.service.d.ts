import { EventEmitter } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { CoreStore } from "../../core.store";
import { ProfileShareService } from "./profileShare.service";
import { ProfileStore, profileStruct } from "./profile.store";
import { NativeStorage } from "@ionic-native/native-storage";
import { Platform } from "ionic-angular";
export declare class ProfileService {
    private pfStore;
    private http;
    private profileShareService;
    private store;
    private nativeStorage;
    private platform;
    private encryptionKey;
    private accountName;
    private accountPassword;
    private accountType;
    private group;
    private _profilegroup;
    private _loginProfileName;
    private _actionIndex;
    checkCompanySuccess: EventEmitter<{}>;
    profileDataKey: Array<string>;
    constructor(pfStore: ProfileStore, http: HttpClient, profileShareService: ProfileShareService, store: CoreStore, nativeStorage: NativeStorage, platform: Platform);
    readonly profilegroup: profileStruct[];
    readonly loginProfileName: string;
    load(): Promise<boolean>;
    init(): Promise<any>;
    restoreBackups(): void;
    backups(): void;
    setProfileData(): Promise<any>;
    createProfile(profile?: profileStruct): void;
    saveProfile(): Promise<any>;
    delProfile(profile?: profileStruct): Promise<any>;
    getUniqueCompareProfilegroup(): any;
    login(profile: profileStruct): Promise<any>;
    resetLogin(): void;
    checklogin(server: string, username: string, password: string): Promise<any>;
    setCompanyRole(company: string, role: string): void;
    checkCompany(companyCode: string, companyId: number, clientId: number, roleId: number): Promise<any>;
    checkContext(): false | {
        clientId: number;
        roleId: number;
    };
    getUser(): any;
    setUser(): Promise<any>;
    private setToken(token);
    private getSessionToken(token);
    private setHeader();
    private isUnique(profile, sourceProfiles?);
}
